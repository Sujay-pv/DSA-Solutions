You are given an integer array nums of size n.
Consider a non-empty subarray from nums that has the maximum possible bitwise AND.

In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.

Return the length of the longest such subarray.

The bitwise AND of an array is the bitwise AND of all the numbers in it.
A subarray is a contiguous sequence of elements within an array.

Example 1:
Input: nums = [1,2,3,3,2,2]
Output: 2
Explanation:
The maximum possible bitwise AND of a subarray is 3.
The longest subarray with that value is [3,3], so we return 2.

Solution:
class Solution {
    public int longestSubarray(int[] nums) {
    int maxVal = 0;
    int maxLen = 0;
    int currentLen = 0;

    for (int num : nums) {
        if (num > maxVal) {
            maxVal = num;          //new maxiumum so update it and restart from 1
            currentLen = 1;
            maxLen = 1;
        } else if (num == maxVal) {
            currentLen++;          //if current num == max, then increase current length and update max length
            maxLen = Math.max(maxLen, currentLen);
        } else {  
            currentLen = 0;        //if the number is lower then reset only the current length while maintaining the maxLen as is.
        }
    }

    return maxLen;
}

}
